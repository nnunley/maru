(require "text-parser.l")
(define-class <arm64> <text-parser> ())
(define-selector $blank)
(define-selector $eol)
(define-selector $_)
(define-selector $digit)
(define-selector $letter)
(define-selector $hexdigit)
(define-selector $integer)
(define-selector $hexint)
(define-selector $number)
(define-selector $immediate)
(define-selector $$blank)
(define-selector $$eol)
(define-selector $$_)
(define-selector $$digit)
(define-selector $$letter)
(define-selector $$hexdigit)
(define-selector $$integer)
(define-selector $$hexint)
(define-selector $$number)
(define-selector $$immediate)
(define-method $blank <arm64> () (let () (text-parser-match-class self "\011 ")))
(define-method $eol <arm64> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 10) (let ((_list_ (array))) (while (text-parser-match-char self 13) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 13) (let ((_list_ (array))) (while (text-parser-match-char self 10) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())))))
(define-method $_ <arm64> () (let () (let ((_list_ (array))) (while (or (text-parser-invoke-rule (quote blank) $blank self) (text-parser-invoke-rule (quote eol) $eol self)) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)))
(define-method $digit <arm64> () (let () (text-parser-match-class self "0123456789")))
(define-method $letter <arm64> () (let () (text-parser-match-class self "ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz")))
(define-method $hexdigit <arm64> () (let () (text-parser-match-class self "0123456789ABCDEFabcdef")))
(define-method $integer <arm64> () (let (x) (let ((pos self.position)) (unless (and (when (and (let ((_list_ (array))) (while (text-parser-invoke-rule (quote digit) $digit self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set self.result (string->number-base (list->string self.result) 10))) (set x self.result) 1) (text-parser-invoke-rule (quote _) $$_ self) (let () (set self.result x) 1)) (set self.position pos) ()))))
(define-method $hexint <arm64> () (let (x) (let ((pos self.position)) (unless (and (text-parser-match-string self "0x" 2) (when (and (let ((_list_ (array))) (while (text-parser-invoke-rule (quote hexdigit) $hexdigit self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set self.result (string->number-base (list->string self.result) 16))) (set x self.result) 1) (text-parser-invoke-rule (quote _) $$_ self) (let () (set self.result x) 1)) (set self.position pos) ()))))
(define-method $number <arm64> () (let () (or (text-parser-invoke-rule (quote hexint) $hexint self) (text-parser-invoke-rule (quote integer) $integer self))))
(define-method $immediate <arm64> () (let (x) (let ((pos self.position)) (unless (and (text-parser-match-object self 35) (when (text-parser-invoke-rule (quote number) $number self) (set x self.result) 1) (let () (set self.result (quasiquote (ir-lit (unquote x)))) 1)) (set self.position pos) ()))))
(define-method $$blank <arm64> () (let () (text-parser-match-class self "\011 ")))
(define-method $$eol <arm64> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 10) (let () (while (text-parser-match-object self 13)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 13) (let () (while (text-parser-match-object self 10)) 1)) (set self.position pos) ())))))
(define-method $$_ <arm64> () (let () (let () (while (or (text-parser-invoke-rule (quote blank) $$blank self) (text-parser-invoke-rule (quote eol) $$eol self))) 1)))
(define-method $$digit <arm64> () (let () (text-parser-match-class self "0123456789")))
(define-method $$letter <arm64> () (let () (text-parser-match-class self "ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz")))
(define-method $$hexdigit <arm64> () (let () (text-parser-match-class self "0123456789ABCDEFabcdef")))
(define-method $$integer <arm64> () (let (x) (let ((pos self.position)) (unless (and (when (and (let ((_list_ (array))) (while (text-parser-invoke-rule (quote digit) $digit self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set self.result (string->number-base (list->string self.result) 10))) (set x self.result) 1) (text-parser-invoke-rule (quote _) $$_ self) (let () x 1)) (set self.position pos) ()))))
(define-method $$hexint <arm64> () (let (x) (let ((pos self.position)) (unless (and (text-parser-match-string self "0x" 2) (when (and (let ((_list_ (array))) (while (text-parser-invoke-rule (quote hexdigit) $hexdigit self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set self.result (string->number-base (list->string self.result) 16))) (set x self.result) 1) (text-parser-invoke-rule (quote _) $$_ self) (let () x 1)) (set self.position pos) ()))))
(define-method $$number <arm64> () (let () (or (text-parser-invoke-rule (quote hexint) $$hexint self) (text-parser-invoke-rule (quote integer) $$integer self))))
(define-method $$immediate <arm64> () (let (x) (let ((pos self.position)) (unless (and (text-parser-match-object self 35) (when (text-parser-invoke-rule (quote number) $number self) (set x self.result) 1) (let () (quasiquote (ir-lit (unquote x))) 1)) (set self.position pos) ()))))
