;; Generate UTF-8 Collation Tables
;; Creates efficient lookup tables for string sorting

(define-function generate-collation-header ()
  (println "/* UTF-8 Collation Tables - Generated by Maru */")
  (println "")
  (println "typedef struct {")
  (println "    uint32_t codepoint;")
  (println "    uint16_t primary;    /* Primary weight (letter group) */")
  (println "    uint8_t  secondary;  /* Secondary weight (diacritics) */") 
  (println "    uint8_t  tertiary;   /* Tertiary weight (case) */")
  (println "} collation_entry;")
  (println ""))

;; Generate basic Latin collation
(define-function generate-latin-collation ()
  (println "/* Basic Latin (ASCII) collation */")
  (println "static const collation_entry latin_basic[] = {")
  
  ;; Spaces and punctuation (low weights)
  (println "    { 0x20, 10, 0, 0 },  /* space */")
  (println "    { 0x21, 20, 0, 0 },  /* ! */")
  (println "    { 0x2E, 25, 0, 0 },  /* . */")
  
  ;; Digits
  (for (i 0 10)
    (let ((cp (+ 48 i)))  ; '0' = 48
      (println "    { 0x" (number->hex cp) ", " (+ 50 i) ", 0, 0 },  /* " i " */")))
  
  ;; Uppercase letters  
  (for (i 0 26)
    (let ((cp (+ 65 i)))  ; 'A' = 65
      (println "    { 0x" (number->hex cp) ", " (+ 100 i) ", 0, 1 },  /* " (code->char cp) " */")))
  
  ;; Lowercase letters
  (for (i 0 26)
    (let ((cp (+ 97 i)))  ; 'a' = 97
      (println "    { 0x" (number->hex cp) ", " (+ 100 i) ", 0, 2 },  /* " (code->char cp) " */")))
  
  (println "    { 0, 0, 0, 0 }  /* sentinel */")
  (println "};")
  (println ""))

;; Generate Latin Extended-A collation for Western European languages
(define-function generate-extended-latin ()
  (println "/* Latin Extended-A collation */")
  (println "static const collation_entry latin_extended[] = {")
  
  ;; French accented characters
  (println "    /* French accents */")
  (println "    { 0xE0, 100, 1, 2 },  /* à - a grave */")
  (println "    { 0xC0, 100, 1, 1 },  /* À - A grave */")
  (println "    { 0xE1, 100, 2, 2 },  /* á - a acute */")
  (println "    { 0xC1, 100, 2, 1 },  /* Á - A acute */")
  (println "    { 0xE2, 100, 3, 2 },  /* â - a circumflex */")
  (println "    { 0xC2, 100, 3, 1 },  /* Â - A circumflex */")
  (println "    { 0xE7, 103, 5, 2 },  /* ç - c cedilla */")
  (println "    { 0xC7, 103, 5, 1 },  /* Ç - C cedilla */")
  (println "    { 0xE8, 105, 1, 2 },  /* è - e grave */")
  (println "    { 0xC8, 105, 1, 1 },  /* È - E grave */")
  (println "    { 0xE9, 105, 2, 2 },  /* é - e acute */")
  (println "    { 0xC9, 105, 2, 1 },  /* É - E acute */")
  
  ;; German umlauts
  (println "    /* German umlauts */")
  (println "    { 0xE4, 100, 6, 2 },  /* ä - a diaeresis */")
  (println "    { 0xC4, 100, 6, 1 },  /* Ä - A diaeresis */")
  (println "    { 0xF6, 115, 6, 2 },  /* ö - o diaeresis */")
  (println "    { 0xD6, 115, 6, 1 },  /* Ö - O diaeresis */")
  (println "    { 0xFC, 121, 6, 2 },  /* ü - u diaeresis */")
  (println "    { 0xDC, 121, 6, 1 },  /* Ü - U diaeresis */")
  (println "    { 0xDF, 119, 5, 2 },  /* ß - eszett (sorts with 'ss') */")
  
  ;; Spanish characters
  (println "    /* Spanish characters */")
  (println "    { 0xF1, 114, 4, 2 },  /* ñ - n tilde */")
  (println "    { 0xD1, 114, 4, 1 },  /* Ñ - N tilde */")
  
  (println "    { 0, 0, 0, 0 }  /* sentinel */")
  (println "};")
  (println ""))

;; Generate binary search function for collation lookup
(define-function generate-collation-lookup ()
  (println "/* Binary search for collation weight */")
  (println "static const collation_entry* find_collation(uint32_t codepoint, ")
  (println "                                             const collation_entry* table,")
  (println "                                             size_t table_size) {")
  (println "    size_t left = 0, right = table_size;")
  (println "    while (left < right) {")
  (println "        size_t mid = left + (right - left) / 2;")
  (println "        if (table[mid].codepoint == codepoint)")
  (println "            return &table[mid];")
  (println "        if (table[mid].codepoint < codepoint)")
  (println "            left = mid + 1;")
  (println "        else")
  (println "            right = mid;")
  (println "    }")
  (println "    return NULL;  /* Not found */")
  (println "}")
  (println ""))

;; Generate string comparison function using collation
(define-function generate-utf8-collate ()
  (println "/* UTF-8 string comparison with collation */")
  (println "static int utf8_collate(const char* s1, const char* s2, const char* locale) {")
  (println "    const unsigned char *p1 = (const unsigned char*)s1;")
  (println "    const unsigned char *p2 = (const unsigned char*)s2;")
  (println "    ")
  (println "    while (*p1 && *p2) {")
  (println "        uint32_t cp1 = utf8_decode_next(&p1);")
  (println "        uint32_t cp2 = utf8_decode_next(&p2);")
  (println "        ")
  (println "        const collation_entry* e1 = find_collation(cp1, latin_extended, ")
  (println "                                    sizeof(latin_extended)/sizeof(collation_entry));")
  (println "        const collation_entry* e2 = find_collation(cp2, latin_extended, ")
  (println "                                    sizeof(latin_extended)/sizeof(collation_entry));")
  (println "        ")
  (println "        /* Compare primary weights */")
  (println "        int diff = (e1 ? e1->primary : cp1) - (e2 ? e2->primary : cp2);")
  (println "        if (diff != 0) return diff;")
  (println "        ")
  (println "        /* Compare secondary weights */")
  (println "        diff = (e1 ? e1->secondary : 0) - (e2 ? e2->secondary : 0);")
  (println "        if (diff != 0) return diff;")
  (println "        ")
  (println "        /* Compare tertiary weights */")
  (println "        diff = (e1 ? e1->tertiary : 0) - (e2 ? e2->tertiary : 0);")
  (println "        if (diff != 0) return diff;")
  (println "    }")
  (println "    ")
  (println "    return *p1 - *p2;  /* One or both strings ended */")
  (println "}")
  (println ""))

;; Main generation
(generate-collation-header)
(generate-latin-collation)
(generate-extended-latin)
(generate-collation-lookup)
(generate-utf8-collate)