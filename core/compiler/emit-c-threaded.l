;;; emit-c-threaded.l -- Threaded Execution C Backend
;;;
;;; Generates C code using threaded execution model where each operation
;;; is a function that calls the next operation directly (direct threading)

;;; Threaded C Generation State
(define *c-indent-level* 0)
(define *c-thread-counter* 0)
(define *c-var-names* ())

;;; Utility Functions
(define-function c-indent ()
  (for (i 0 *c-indent-level*) (print "    ")))

(define-function c-emit-line (str)
  (c-indent)
  (println str))

(define-function c-fresh-thread ()
  (let ((name (concat-string "thread_" (long->string (set *c-thread-counter* (+ *c-thread-counter* 1))))))
    name))

(define-function c-var-name (var)
  (or (cdr (assq var *c-var-names*))
      (let ((name (concat-string "_v" (long->string (list-length *c-var-names*)))))
        (set *c-var-names* (cons (cons var name) *c-var-names*))
        name)))

;;; Threaded Execution Framework
(define-function generate-threaded-c-header ()
  "Generate C header for threaded execution"
  (println "/* Generated by Maru Threaded C Backend */")
  (println "#include <stdio.h>")
  (println "#include <stdlib.h>")
  (println "#include <string.h>")
  (println)
  (println "typedef union Object *oop;")
  (println "#define nil ((oop)0)")
  (println "#define LONG(n) ((oop)(((long)(n) << 1) | 1))")
  (println "#define getLong(x) ((long)(x) >> 1)")
  (println)
  (println "/* Threaded execution context */")
  (println "typedef struct {")
  (c-indent) (println "    oop stack[1024];   /* Value stack */")
  (c-indent) (println "    oop *sp;           /* Stack pointer */")
  (c-indent) (println "    oop locals[256];   /* Local variables */")
  (c-indent) (println "    oop acc;           /* Accumulator */")
  (println "} thread_context;")
  (println)
  (println "typedef oop (*thread_func)(thread_context *ctx);")
  (println)
  (println "/* Stack operations */")
  (println "#define PUSH(ctx, val) (*((ctx)->sp++) = (val))")
  (println "#define POP(ctx) (*(--(ctx)->sp))")
  (println "#define PEEK(ctx) (*((ctx)->sp - 1))")
  (println))

;;; Threaded operation generators
(define-function c-gen-threaded-literal (value next)
  "Generate threaded code for literal value"
  (let ((thread-name (c-fresh-thread)))
    (println "oop " thread-name "(thread_context *ctx) {")
    (set *c-indent-level* 1)
    (c-emit-line (concat-string "ctx->acc = " (if (long? value)
                                                  (concat-string "LONG(" (long->string value) ")")
                                                  "nil") ";"))
    (c-emit-line (concat-string "return " next "(ctx);"))
    (set *c-indent-level* 0)
    (println "}")
    (println)
    thread-name))

(define-function c-gen-threaded-binop (op-str left-thread right-thread next)
  "Generate threaded code for binary operation"
  (let ((thread-name (c-fresh-thread)))
    (println "oop " thread-name "(thread_context *ctx) {")
    (set *c-indent-level* 1)
    (c-emit-line (concat-string "oop left = " left-thread "(ctx);"))
    (c-emit-line (concat-string "oop right = " right-thread "(ctx);"))
    (c-emit-line (concat-string "ctx->acc = LONG(getLong(left) " op-str " getLong(right));"))
    (c-emit-line (concat-string "return " next "(ctx);"))
    (set *c-indent-level* 0)
    (println "}")
    (println)
    thread-name))

(define-function c-gen-threaded-call (func-name args-threads next)
  "Generate threaded code for function call"
  (let ((thread-name (c-fresh-thread)))
    (println "oop " thread-name "(thread_context *ctx) {")
    (set *c-indent-level* 1)
    ;; Evaluate arguments onto stack
    (list-do arg-thread args-threads
      (c-emit-line (concat-string arg-thread "(ctx);")))
    ;; Call function
    (c-emit-line (concat-string "ctx->acc = " func-name "(ctx);"))
    (c-emit-line (concat-string "return " next "(ctx);"))
    (set *c-indent-level* 0)
    (println "}")
    (println)
    thread-name))

(define-function c-gen-threaded-if (cond-thread then-thread else-thread next)
  "Generate threaded code for conditional"
  (let ((thread-name (c-fresh-thread)))
    (println "oop " thread-name "(thread_context *ctx) {")
    (set *c-indent-level* 1)
    (c-emit-line (concat-string "oop cond = " cond-thread "(ctx);"))
    (c-emit-line "if (cond != nil) {")
    (set *c-indent-level* 2)
    (c-emit-line (concat-string "return " then-thread "(ctx);"))
    (set *c-indent-level* 1)
    (c-emit-line "} else {")
    (set *c-indent-level* 2)
    (c-emit-line (concat-string "return " else-thread "(ctx);"))
    (set *c-indent-level* 1)
    (c-emit-line "}")
    (set *c-indent-level* 0)
    (println "}")
    (println)
    thread-name))

(define-function c-gen-threaded-return ()
  "Generate threaded code for return"
  (let ((thread-name (c-fresh-thread)))
    (println "oop " thread-name "(thread_context *ctx) {")
    (set *c-indent-level* 1)
    (c-emit-line "return ctx->acc;")
    (set *c-indent-level* 0)
    (println "}")
    (println)
    thread-name))

;;; Generate complete threaded function
(define-function generate-threaded-function ()
  "Generate a sample threaded function"
  (generate-threaded-c-header)
  
  ;; Generate threads for: add(40, 2)
  (let ((ret-thread (c-gen-threaded-return))
        (thread42 ())
        (thread40 ())
        (add-thread ()))
    
    ;; Thread for literal 42
    (set thread42 (c-gen-threaded-literal 42 ret-thread))
    
    ;; Thread for literal 40  
    (set thread40 (c-gen-threaded-literal 40 thread42))
    
    ;; Thread for addition
    (set add-thread (c-gen-threaded-binop "+" "thread_2" "thread_1" ret-thread))
    
    ;; Main function
    (println "oop add_threaded(oop a, oop b) {")
    (set *c-indent-level* 1)
    (c-emit-line "thread_context ctx = {0};")
    (c-emit-line "ctx.sp = ctx.stack;")
    (c-emit-line "PUSH(&ctx, a);")
    (c-emit-line "PUSH(&ctx, b);")
    (c-emit-line (concat-string "return " add-thread "(&ctx);"))
    (set *c-indent-level* 0)
    (println "}")
    (println)
    
    ;; Test main
    (println "int main() {")
    (set *c-indent-level* 1)
    (c-emit-line "oop result = add_threaded(LONG(40), LONG(2));")
    (c-emit-line "printf(\"Threaded result: %ld\\n\", getLong(result));")
    (c-emit-line "return 0;")
    (set *c-indent-level* 0)
    (println "}")))

(println "emit-c-threaded.l loaded")