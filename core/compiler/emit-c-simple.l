;;; emit-c-simple.l -- Simple High-Level C Code Generation
;;;
;;; A simplified version that generates basic C expressions without mutual recursion

;;; C Generation State
(define *c-indent-level* 0)

;;; Utility Functions
(define-function c-indent ()
  (for (i 0 *c-indent-level*) (print "    ")))

(define-function c-emit-line (str)
  (c-indent)
  (println str))

;;; Simple C expression generation (non-recursive for now)
(define-function c-gen-literal (expr)
  "Generate C literal expression"
  (cond
    ((long? expr) (concat-string "LONG(" (long->string expr) ")"))
    ((string? expr) (concat-string "\"" expr "\""))
    (else "nil")))

;;; Generate a simple C program
(define-function generate-simple-c-program ()
  "Generate a simple C program to test the concept"
  (println "/* Generated by Maru High-Level C Backend */")
  (println "#include <stdio.h>")
  (println "#include <stdlib.h>")
  (println)
  (println "typedef union Object *oop;")
  (println "#define nil ((oop)0)")
  (println "#define LONG(n) ((oop)(((long)(n) << 1) | 1))")
  (println "#define getLong(x) ((long)(x) >> 1)")
  (println)
  (println "oop add(oop a, oop b) {")
  (set *c-indent-level* 1)
  (c-emit-line "return LONG(getLong(a) + getLong(b));")
  (set *c-indent-level* 0)
  (println "}")
  (println)
  (println "int main() {")
  (set *c-indent-level* 1)
  (c-emit-line (concat-string "oop result = add(" (c-gen-literal 40) ", " (c-gen-literal 2) ");"))
  (c-emit-line "printf(\"Result: %ld\\n\", getLong(result));")
  (c-emit-line "return 0;")
  (set *c-indent-level* 0)
  (println "}"))

(println "emit-c-simple.l loaded")