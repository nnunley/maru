;; UTF-8 Implementation in Maru Lisp
;; Generates minimal C code for UTF-8 string handling

(println "/* UTF-8 String Handling - Generated by Maru Lisp */")
(println "/* Assumes standard includes are already present in eval */")
(println "")

;; UTF-8 byte classification functions
(define-function generate-utf8-classifier ()
  (println "/* UTF-8 byte classification */")
  (println "static inline int utf8_is_ascii(unsigned char c) { return c < 0x80; }")
  (println "static inline int utf8_is_start_2(unsigned char c) { return (c & 0xE0) == 0xC0; }")
  (println "static inline int utf8_is_start_3(unsigned char c) { return (c & 0xF0) == 0xE0; }")
  (println "static inline int utf8_is_start_4(unsigned char c) { return (c & 0xF8) == 0xF0; }")
  (println "static inline int utf8_is_continuation(unsigned char c) { return (c & 0xC0) == 0x80; }")
  (println ""))

;; Generate UTF-8 byte sequence length detector
(define-function generate-utf8-sequence-length ()
  (println "/* Get UTF-8 sequence length from first byte */")
  (println "static int utf8_sequence_length(unsigned char first_byte) {")
  (println "    if (utf8_is_ascii(first_byte)) return 1;")
  (println "    if (utf8_is_start_2(first_byte)) return 2;")
  (println "    if (utf8_is_start_3(first_byte)) return 3;")
  (println "    if (utf8_is_start_4(first_byte)) return 4;")
  (println "    return 0;  /* Invalid UTF-8 */")
  (println "}")
  (println ""))

;; Generate UTF-8 character length counter
(define-function generate-utf8-strlen ()
  (println "/* Count UTF-8 characters (code points) */")
  (println "static size_t utf8_strlen(const char *str) {")
  (println "    size_t len = 0;")
  (println "    const unsigned char *s = (const unsigned char *)str;")
  (println "    ")
  (println "    while (*s) {")
  (println "        int seq_len = utf8_sequence_length(*s);")
  (println "        if (seq_len == 0) break;  /* Invalid UTF-8 */")
  (println "        s += seq_len;")
  (println "        len++;")
  (println "    }")
  (println "    return len;")
  (println "}")
  (println ""))

;; Generate UTF-8 codepoint decoder
(define-function generate-utf8-decode ()
  (println "/* Decode UTF-8 sequence to Unicode codepoint */")
  (println "static uint32_t utf8_decode_char(const unsigned char *utf8, int *bytes_consumed) {")
  (println "    uint32_t codepoint = 0;")
  (println "    int len = utf8_sequence_length(utf8[0]);")
  (println "    *bytes_consumed = len;")
  (println "    ")
  (println "    switch (len) {")
  (println "        case 1:")
  (println "            codepoint = utf8[0];")
  (println "            break;")
  (println "        case 2:")
  (println "            codepoint = ((utf8[0] & 0x1F) << 6) | (utf8[1] & 0x3F);")
  (println "            break;")
  (println "        case 3:")
  (println "            codepoint = ((utf8[0] & 0x0F) << 12) | ((utf8[1] & 0x3F) << 6) | (utf8[2] & 0x3F);")
  (println "            break;")
  (println "        case 4:")
  (println "            codepoint = ((utf8[0] & 0x07) << 18) | ((utf8[1] & 0x3F) << 12) | ((utf8[2] & 0x3F) << 6) | (utf8[3] & 0x3F);")
  (println "            break;")
  (println "        default:")
  (println "            codepoint = 0xFFFD;  /* Replacement character */")
  (println "            *bytes_consumed = 1;")
  (println "    }")
  (println "    return codepoint;")
  (println "}")
  (println ""))

;; Generate compatibility layer
(define-function generate-compatibility-layer ()
  (println "/* Compatibility layer for wchar_t migration */")
  (println "#define wchar_t char")
  (println "#define wcslen(s) utf8_strlen(s)")
  (println "#define wcscpy(dst, src) strcpy(dst, src)")
  (println "#define wcsdup(src) strdup(src)")
  (println "#define wcscmp(s1, s2) strcmp(s1, s2)")
  (println "")
  (println "/* Wide I/O compatibility */")
  (println "typedef int wint_t;")
  (println "#define WEOF (-1)")
  (println "static wint_t getwc(FILE *fp) { return fgetc(fp); }")
  (println "static wint_t ungetwc(wint_t c, FILE *fp) { return ungetc(c, fp); }")
  (println "static int putwc(wint_t c, FILE *fp) { return fputc(c, fp); }")
  (println "static int fwide(FILE *stream, int mode) { (void)stream; return mode; }")
  (println "")
  (println "/* String conversion compatibility */")
  (println "static double wcstod(const char *str, char **endptr) { return strtod(str, endptr); }")
  (println "static unsigned long wcstoul(const char *str, char **endptr, int base) { return strtoul(str, endptr, base); }")
  (println "")
  (println "/* Printf compatibility */")
  (println "static int swprintf(char *buf, size_t size, const char *fmt, ...) {")
  (println "    va_list args;")
  (println "    va_start(args, fmt);")
  (println "    int result = vsnprintf(buf, size, fmt, args);")
  (println "    va_end(args);")
  (println "    return result;")
  (println "}")
  (println ""))

;; Main generation function
(define-function generate-utf8-library ()
  (generate-utf8-classifier)
  (generate-utf8-sequence-length)
  (generate-utf8-strlen)
  (generate-utf8-decode)
  (generate-compatibility-layer))

;; Generate the library
(generate-utf8-library)