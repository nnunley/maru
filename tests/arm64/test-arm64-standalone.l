;;; test-arm64-standalone.l -- Standalone ARM64 assembly generation test

;; Helper functions
(define-function number->string (n)
  (let ((digits ())
        (negative (< n 0)))
    (if negative (set n (- n)))
    (if (= n 0)
        "0"
      (let ()
        (while (> n 0)
          (set digits (cons (+ ?0 (% n 10)) digits))
          (set n (/ n 10)))
        (if negative (set digits (cons ?- digits)))
        (list->string digits)))))

;; Test basic ARM64 instruction formatting
(define-function arm64-reg-name (n is-64bit)
  (concat-string 
    (if is-64bit "x" "w")
    (number->string n)))

(define-function test-arm64-instructions ()
  (println ";;; ARM64 Assembly Generation Test")
  (println ";;; Generated by test-arm64-standalone.l")
  (println)
  
  ;; Test register naming
  (println ";;; Register naming test:")
  (println ";; 64-bit: " (arm64-reg-name 0 't) ", " (arm64-reg-name 29 't))
  (println ";; 32-bit: " (arm64-reg-name 0 ()) ", " (arm64-reg-name 15 ()))
  (println)
  
  ;; Test a simple function
  (println "\t.text")
  (println "\t.align\t4")
  (println "\t.globl\t_add")
  (println "_add:")
  (println "\t; Function prologue")
  (println "\tstp\tx29, x30, [sp, #-16]!")
  (println "\tmov\tx29, sp")
  (println "\t; Add parameters")
  (println "\tadd\tw0, w0, w1")
  (println "\t; Function epilogue")  
  (println "\tldp\tx29, x30, [sp], #16")
  (println "\tret")
  (println)
  
  ;; Test memory operations
  (println "\t.globl\t_load_store_test")
  (println "_load_store_test:")
  (println "\t; Load from memory")
  (println "\tldr\tx2, [x0]")
  (println "\tldr\tw3, [x1, #8]")
  (println "\t; Store to memory")
  (println "\tstr\tx2, [x1]")
  (println "\tstr\tw3, [x0, #4]")
  (println "\tret")
  (println)
  
  ;; Test immediate operations
  (println "\t.globl\t_immediate_test")
  (println "_immediate_test:")
  (println "\t; Move immediates")
  (println "\tmov\tw0, #42")
  (println "\tmov\tx1, #0x1000")
  (println "\t; Add immediate")
  (println "\tadd\tx2, x1, #256")
  (println "\t; Compare and branch")
  (println "\tcmp\tx0, #0")
  (println "\tb.eq\t.L1")
  (println "\tmov\tx0, #1")
  (println ".L1:")
  (println "\tret")
  (println)
  
  ;; Test all instruction types we support
  (println ";;; Comprehensive instruction test:")
  (println ";; Arithmetic")
  (println "\tadd\tx0, x1, x2")
  (println "\tsub\tw3, w4, w5")
  (println "\tmul\tx6, x7, x8")
  (println "\tsdiv\tw9, w10, w11")
  (println)
  
  (println ";; Logical")
  (println "\tand\tx12, x13, x14")
  (println "\torr\tw15, w16, w17")
  (println "\teor\tx18, x19, x20")
  (println)
  
  (println ";; Shift")
  (println "\tlsl\tx21, x22, x23")
  (println "\tlsr\tw24, w25, w26")
  (println "\tasr\tx27, x28, x29")
  (println)
  
  (println ";; Load/Store pairs")
  (println "\tstp\tx0, x1, [sp, #-16]!")
  (println "\tldp\tx2, x3, [sp], #16")
  (println)
  
  (println ";; Branches")
  (println "\tb\t.Lforward")
  (println "\tbl\t_function")
  (println "\tblr\tx30")
  (println "\tret")
  (println ".Lforward:")
  (println)
  
  (println ";;; Test complete!"))

;; Run the test
(test-arm64-instructions)