[32m[?7l...         [0m *load-source*
[?7h[32m[?7lcompile-peg.l:168[0m (or *load-source* "<unknown>")
[?7h[32m[?7lcompile-peg.l:168[0m (println ";; Source grammar: " (or *load-source* "<unknown>"))
[?7h[32m[?7lcompile-peg.l:159[0m (let ((class (or (car decl) "<text-parser>"))) (println ";; GENERATED CODE - DO NOT EDIT") (println ";; This file was automatically generated by compile-peg.l") (println ";; Source grammar: " (or *load-source* "<unknown>")) (println ";; Generated at: " (or (current-date-string) "<unknown>")) (println) (println "(require \"text-parser.l\")") (and decl (println "(define-class " (car decl) " " (cadr decl) " " (caddr decl) ")")) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $" name ")")) (set _list_ (cdr _list_)))) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $$" name ")")) (set _list_ (cdr _list_)))) (map-with compile-rule rules class))
[?7h[32m[?7lcompile-peg.l:159[0m (let ((names (map car rules))) (let ((class (or (car decl) "<text-parser>"))) (println ";; GENERATED CODE - DO NOT EDIT") (println ";; This file was automatically generated by compile-peg.l") (println ";; Source grammar: " (or *load-source* "<unknown>")) (println ";; Generated at: " (or (current-date-string) "<unknown>")) (println) (println "(require \"text-parser.l\")") (and decl (println "(define-class " (car decl) " " (cadr decl) " " (caddr decl) ")")) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $" name ")")) (set _list_ (cdr _list_)))) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $$" name ")")) (set _list_ (cdr _list_)))) (map-with compile-rule rules class)))
[?7h[32m[?7lcompile-peg.l:159[0m (let ((rules (cdr spec))) (let ((names (map car rules))) (let ((class (or (car decl) "<text-parser>"))) (println ";; GENERATED CODE - DO NOT EDIT") (println ";; This file was automatically generated by compile-peg.l") (println ";; Source grammar: " (or *load-source* "<unknown>")) (println ";; Generated at: " (or (current-date-string) "<unknown>")) (println) (println "(require \"text-parser.l\")") (and decl (println "(define-class " (car decl) " " (cadr decl) " " (caddr decl) ")")) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $" name ")")) (set _list_ (cdr _list_)))) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $$" name ")")) (set _list_ (cdr _list_)))) (map-with compile-rule rules class))))
[?7h[32m[?7lcompile-peg.l:159[0m (let ((decl (caar spec))) (let ((rules (cdr spec))) (let ((names (map car rules))) (let ((class (or (car decl) "<text-parser>"))) (println ";; GENERATED CODE - DO NOT EDIT") (println ";; This file was automatically generated by compile-peg.l") (println ";; Source grammar: " (or *load-source* "<unknown>")) (println ";; Generated at: " (or (current-date-string) "<unknown>")) (println) (println "(require \"text-parser.l\")") (and decl (println "(define-class " (car decl) " " (cadr decl) " " (caddr decl) ")")) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $" name ")")) (set _list_ (cdr _list_)))) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $$" name ")")) (set _list_ (cdr _list_)))) (map-with compile-rule rules class)))))
[?7h[32m[?7lcompile-peg.l:159[0m (let ((spec (parse-file <peg> $parser_spec (let ((_list_ *arguments*)) (let ((_head_ (car _list_))) (set *arguments* (cdr _list_)) _head_))))) (let ((decl (caar spec))) (let ((rules (cdr spec))) (let ((names (map car rules))) (let ((class (or (car decl) "<text-parser>"))) (println ";; GENERATED CODE - DO NOT EDIT") (println ";; This file was automatically generated by compile-peg.l") (println ";; Source grammar: " (or *load-source* "<unknown>")) (println ";; Generated at: " (or (current-date-string) "<unknown>")) (println) (println "(require \"text-parser.l\")") (and decl (println "(define-class " (car decl) " " (cadr decl) " " (caddr decl) ")")) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $" name ")")) (set _list_ (cdr _list_)))) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $$" name ")")) (set _list_ (cdr _list_)))) (map-with compile-rule rules class))))))
[?7h[32m[?7lcompile-peg.l:158[0m (while *arguments* (let ((spec (parse-file <peg> $parser_spec (let ((_list_ *arguments*)) (let ((_head_ (car _list_))) (set *arguments* (cdr _list_)) _head_))))) (let ((decl (caar spec))) (let ((rules (cdr spec))) (let ((names (map car rules))) (let ((class (or (car decl) "<text-parser>"))) (println ";; GENERATED CODE - DO NOT EDIT") (println ";; This file was automatically generated by compile-peg.l") (println ";; Source grammar: " (or *load-source* "<unknown>")) (println ";; Generated at: " (or (current-date-string) "<unknown>")) (println) (println "(require \"text-parser.l\")") (and decl (println "(define-class " (car decl) " " (cadr decl) " " (caddr decl) ")")) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $" name ")")) (set _list_ (cdr _list_)))) (let ((_list_ names)) (while _list_ (let ((name (car _list_))) (println "(define-selector $$" name ")")) (set _list_ (cdr _list_)))) (map-with compile-rule rules class)))))))
[?7h