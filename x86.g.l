(require "text-parser.l")
(define-class <x86> <text-parser> ())
(define-selector $blank)
(define-selector $eol)
(define-selector $_)
(define-selector $digit)
(define-selector $letter)
(define-selector $integer)
(define-selector $immediate)
(define-selector $rax)
(define-selector $rbx)
(define-selector $rcx)
(define-selector $rdx)
(define-selector $register)
(define-selector $mov_reg_reg)
(define-selector $mov_imm_reg)
(define-selector $instruction)
(define-selector $program)
(define-selector $$blank)
(define-selector $$eol)
(define-selector $$_)
(define-selector $$digit)
(define-selector $$letter)
(define-selector $$integer)
(define-selector $$immediate)
(define-selector $$rax)
(define-selector $$rbx)
(define-selector $$rcx)
(define-selector $$rdx)
(define-selector $$register)
(define-selector $$mov_reg_reg)
(define-selector $$mov_imm_reg)
(define-selector $$instruction)
(define-selector $$program)
(define-method $blank <x86> () (let () (text-parser-match-class self "\011 ")))
(define-method $eol <x86> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 10) (let ((_list_ (array))) (while (text-parser-match-char self 13) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 13) (let ((_list_ (array))) (while (text-parser-match-char self 10) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)) (set self.position pos) ())))))
(define-method $_ <x86> () (let () (let ((_list_ (array))) (while (or (text-parser-invoke-rule (quote blank) $blank self) (text-parser-invoke-rule (quote eol) $eol self)) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1)))
(define-method $digit <x86> () (let () (text-parser-match-class self "0123456789")))
(define-method $letter <x86> () (let () (text-parser-match-class self "ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz")))
(define-method $integer <x86> () (let (x) (let ((pos self.position)) (unless (and (when (and (let ((_list_ (array))) (while (text-parser-invoke-rule (quote digit) $digit self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set self.result (string->number-base (list->string self.result) 10))) (set x self.result) 1) (text-parser-invoke-rule (quote _) $$_ self) (let () (set self.result x) 1)) (set self.position pos) ()))))
(define-method $immediate <x86> () (let (x) (let ((pos self.position)) (unless (and (text-parser-match-object self 36) (when (text-parser-invoke-rule (quote integer) $integer self) (set x self.result) 1) (let () (set self.result (quasiquote (ir-lit (unquote x)))) 1)) (set self.position pos) ()))))
(define-method $rax <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rax" 4) (let () (set self.result (quote rax)) 1)) (set self.position pos) ()))))
(define-method $rbx <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rbx" 4) (let () (set self.result (quote rbx)) 1)) (set self.position pos) ()))))
(define-method $rcx <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rcx" 4) (let () (set self.result (quote rcx)) 1)) (set self.position pos) ()))))
(define-method $rdx <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rdx" 4) (let () (set self.result (quote rdx)) 1)) (set self.position pos) ()))))
(define-method $register <x86> () (let () (or (text-parser-invoke-rule (quote rax) $rax self) (text-parser-invoke-rule (quote rbx) $rbx self) (text-parser-invoke-rule (quote rcx) $rcx self) (text-parser-invoke-rule (quote rdx) $rdx self))))
(define-method $mov_reg_reg <x86> () (let (dst src) (let ((pos self.position)) (unless (and (text-parser-match-string self "mov" 3) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote register) $register self) (set src self.result) 1) (text-parser-match-object self 44) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote register) $register self) (set dst self.result) 1) (let () (set self.result (quasiquote (ir-set (quote (unquote dst)) (ir-get (quote (unquote src)))))) 1)) (set self.position pos) ()))))
(define-method $mov_imm_reg <x86> () (let (dst src) (let ((pos self.position)) (unless (and (text-parser-match-string self "mov" 3) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote immediate) $immediate self) (set src self.result) 1) (text-parser-match-object self 44) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote register) $register self) (set dst self.result) 1) (let () (set self.result (quasiquote (ir-set (quote (unquote dst)) (unquote src)))) 1)) (set self.position pos) ()))))
(define-method $instruction <x86> () (let () (or (text-parser-invoke-rule (quote mov_reg_reg) $mov_reg_reg self) (text-parser-invoke-rule (quote mov_imm_reg) $mov_imm_reg self))))
(define-method $program <x86> () (let (insns) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote _) $$_ self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote instruction) $instruction self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set insns self.result) 1) (or (not (let ((pos self.position)) (and (text-parser-match-any self) (set self.position pos)))) (text-parser-expected self "instruction")) (let () (set self.result insns) 1)) (set self.position pos) ()))))
(define-method $$blank <x86> () (let () (text-parser-match-class self "\011 ")))
(define-method $$eol <x86> () (let () (or (let ((pos self.position)) (unless (and (text-parser-match-object self 10) (let () (while (text-parser-match-object self 13)) 1)) (set self.position pos) ())) (let ((pos self.position)) (unless (and (text-parser-match-object self 13) (let () (while (text-parser-match-object self 10)) 1)) (set self.position pos) ())))))
(define-method $$_ <x86> () (let () (let () (while (or (text-parser-invoke-rule (quote blank) $$blank self) (text-parser-invoke-rule (quote eol) $$eol self))) 1)))
(define-method $$digit <x86> () (let () (text-parser-match-class self "0123456789")))
(define-method $$letter <x86> () (let () (text-parser-match-class self "ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz")))
(define-method $$integer <x86> () (let (x) (let ((pos self.position)) (unless (and (when (and (let ((_list_ (array))) (while (text-parser-invoke-rule (quote digit) $digit self) (array-append _list_ self.result)) (set self.result (array->list _list_))) (set self.result (string->number-base (list->string self.result) 10))) (set x self.result) 1) (text-parser-invoke-rule (quote _) $$_ self) (let () x 1)) (set self.position pos) ()))))
(define-method $$immediate <x86> () (let (x) (let ((pos self.position)) (unless (and (text-parser-match-object self 36) (when (text-parser-invoke-rule (quote integer) $integer self) (set x self.result) 1) (let () (quasiquote (ir-lit (unquote x))) 1)) (set self.position pos) ()))))
(define-method $$rax <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rax" 4) (let () (quote rax) 1)) (set self.position pos) ()))))
(define-method $$rbx <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rbx" 4) (let () (quote rbx) 1)) (set self.position pos) ()))))
(define-method $$rcx <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rcx" 4) (let () (quote rcx) 1)) (set self.position pos) ()))))
(define-method $$rdx <x86> () (let () (let ((pos self.position)) (unless (and (text-parser-match-string self "%rdx" 4) (let () (quote rdx) 1)) (set self.position pos) ()))))
(define-method $$register <x86> () (let () (or (text-parser-invoke-rule (quote rax) $$rax self) (text-parser-invoke-rule (quote rbx) $$rbx self) (text-parser-invoke-rule (quote rcx) $$rcx self) (text-parser-invoke-rule (quote rdx) $$rdx self))))
(define-method $$mov_reg_reg <x86> () (let (dst src) (let ((pos self.position)) (unless (and (text-parser-match-string self "mov" 3) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote register) $register self) (set src self.result) 1) (text-parser-match-object self 44) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote register) $register self) (set dst self.result) 1) (let () (quasiquote (ir-set (quote (unquote dst)) (ir-get (quote (unquote src))))) 1)) (set self.position pos) ()))))
(define-method $$mov_imm_reg <x86> () (let (dst src) (let ((pos self.position)) (unless (and (text-parser-match-string self "mov" 3) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote immediate) $immediate self) (set src self.result) 1) (text-parser-match-object self 44) (text-parser-invoke-rule (quote _) $$_ self) (when (text-parser-invoke-rule (quote register) $register self) (set dst self.result) 1) (let () (quasiquote (ir-set (quote (unquote dst)) (unquote src))) 1)) (set self.position pos) ()))))
(define-method $$instruction <x86> () (let () (or (text-parser-invoke-rule (quote mov_reg_reg) $$mov_reg_reg self) (text-parser-invoke-rule (quote mov_imm_reg) $$mov_imm_reg self))))
(define-method $$program <x86> () (let (insns) (let ((pos self.position)) (unless (and (text-parser-invoke-rule (quote _) $$_ self) (when (let ((_list_ (array))) (while (text-parser-invoke-rule (quote instruction) $instruction self) (array-append _list_ self.result)) (set self.result (array->list _list_)) 1) (set insns self.result) 1) (or (not (let ((pos self.position)) (and (text-parser-match-any self) (set self.position pos)))) (text-parser-expected self "instruction")) (let () insns 1)) (set self.position pos) ()))))
