;;; emit-c-threaded-clean.l -- Clean Threaded C Compiler with Forward Declarations
;;;
;;; Final working version that generates compilable C code

;; Load base functionality
(load "emit-c-threaded-fixed.l")

;; Global state
(define *thread-forward-decls* ())
(define *thread-implementations* ())

;; Thread generation with proper recording
(define-function c-gen-literal-clean (value next)
  (let ((name (c-fresh-thread)))
    ;; Record forward declaration
    (set *thread-forward-decls* 
         (cons (concat-string "oop " (concat-string name "(thread_context *ctx);"))
               *thread-forward-decls*))
    
    ;; Record implementation
    (set *thread-implementations*
         (cons (lambda ()
                 (println "oop " name "(thread_context *ctx) {")
                 (print "    ctx->acc = ")
                 (if (long? value)
                     (println "LONG(" value ");")
                     (println "nil;"))
                 (println "    return " next "(ctx);")
                 (println "}"))
               *thread-implementations*))
    name))

(define-function c-gen-binop-clean (op left right next)
  (let ((name (c-fresh-thread)))
    ;; Record forward declaration
    (set *thread-forward-decls* 
         (cons (concat-string "oop " (concat-string name "(thread_context *ctx);"))
               *thread-forward-decls*))
    
    ;; Record implementation
    (set *thread-implementations*
         (cons (lambda ()
                 (println "oop " name "(thread_context *ctx) {")
                 (println "    ctx->acc = LONG(" left " " op " " right ");")
                 (println "    return " next "(ctx);")
                 (println "}"))
               *thread-implementations*))
    name))

(define-function c-gen-return-clean ()
  (let ((name (c-fresh-thread)))
    ;; Record forward declaration
    (set *thread-forward-decls* 
         (cons (concat-string "oop " (concat-string name "(thread_context *ctx);"))
               *thread-forward-decls*))
    
    ;; Record implementation
    (set *thread-implementations*
         (cons (lambda ()
                 (println "oop " name "(thread_context *ctx) {")
                 (println "    return ctx->acc;")
                 (println "}"))
               *thread-implementations*))
    name))

;; Simple reverse function
(define-function my-reverse (lst)
  (let ((result ()))
    (while lst
      (set result (cons (car lst) result))
      (set lst (cdr lst)))
    result))

;; Main compilation
(define-function compile-clean (expr)
  ;; Reset state
  (set *thread-forward-decls* ())
  (set *thread-implementations* ())
  (set *c-thread-counter* 0)
  
  ;; Header
  (println "/* Threaded C Code Generated by Maru */")
  (println "#include <stdio.h>")
  (println "#include <stdlib.h>")
  (println)
  (println "typedef void *oop;")
  (println "#define nil ((oop)0)")
  (println "#define LONG(n) ((oop)(((long)(n) << 1) | 1))")
  (println "#define getLong(x) ((long)(x) >> 1)")
  (println)
  (println "typedef struct {")
  (println "    oop stack[1024];")
  (println "    oop *sp;")
  (println "    oop acc;")
  (println "} thread_context;")
  (println)
  
  ;; Compile expression
  (let* ((ret (c-gen-return-clean))
         (main (cond
                 ((and (pair? expr) (= (car expr) '+))
                  (c-gen-binop-clean "+" (cadr expr) (caddr expr) ret))
                 ((and (pair? expr) (= (car expr) '-))
                  (c-gen-binop-clean "-" (cadr expr) (caddr expr) ret))
                 ((and (pair? expr) (= (car expr) '*))
                  (c-gen-binop-clean "*" (cadr expr) (caddr expr) ret))
                 ((long? expr)
                  (c-gen-literal-clean expr ret))
                 (else (error "Unsupported expression")))))
    
    ;; Forward declarations
    (println "/* Forward declarations */")
    (let ((decls (my-reverse *thread-forward-decls*)))
      (while decls
        (println (car decls))
        (set decls (cdr decls))))
    (println)
    
    ;; Implementations
    (println "/* Thread implementations */")
    (let ((impls (my-reverse *thread-implementations*)))
      (while impls
        ((car impls))
        (println)
        (set impls (cdr impls))))
    
    ;; Main function
    (println "int main() {")
    (println "    thread_context ctx = {0};")
    (println "    ctx.sp = ctx.stack;")
    (println "    oop result = " main "(&ctx);")
    (println "    printf(\"Result: %ld\\n\", getLong(result));")
    (println "    return 0;")
    (println "}")))

;; Test it
(define-function test-clean ()
  (println "=== Testing Clean Threaded C Compiler ===")
  (compile-clean '(+ 40 2)))

(println "emit-c-threaded-clean.l loaded")