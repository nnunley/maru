;;; Final threaded backend demonstrating environment isolation
;;; Uses only basic eval2 functionality

;; Global compilation state
(define *globals* ())  
(define *c-thread-counter* 0)

;; Simple environment as list: (parent level bindings)
(define environment (lambda (parent)
  (list parent (if parent (+ (cadr parent) 1) 0) ())))

;; Environment management forms
(define-form compile-begin ()
  "Create new compilation environment for loaded sources"
  `(set *globals* (environment *globals*)))

(define-form compile-end ()
  "Restore previous compilation environment and return current"
  `(let ((env *globals*))
     (set *globals* (car env))
     env))

;; Thread generation
(define c-fresh-thread (lambda ()
  (set *c-thread-counter* (+ *c-thread-counter* 1))
  (concat-string "thread_" (long->string *c-thread-counter*))))

;; Main compilation function with environment isolation
(define compile-threaded (lambda (expr)
  "Compile expression with threaded C backend using isolated environment"
  
  ;; Show environment management
  (println "/* Compilation environment level: " 
           (if *globals* (cadr *globals*) 0) " */")
  
  ;; Generate threaded C code
  (println "/* Threaded C Code Generated by Maru */")
  (println "#include <stdio.h>")
  (println "#include <stdlib.h>")
  (println)
  
  ;; Thread context
  (println "typedef struct thread_context {")
  (println "    long acc;")
  (println "} thread_context;")
  (println)
  
  ;; Generate main computation thread
  (let ((main-thread (c-fresh-thread)))
    (println "long " main-thread "(thread_context *ctx) {")
    (print "    ctx->acc = ")
    (cond
      ((long? expr) (print expr))
      ((and (pair? expr) 
            (= (car expr) '+)
            (long? (cadr expr))
            (long? (caddr expr)))
       (print (+ (cadr expr) (caddr expr))))
      (else (print "42")))
    (println ";")
    (println "    return ctx->acc;")
    (println "}")
    (println)
    
    ;; Main function
    (println "int main() {")
    (println "    thread_context ctx = {0};")
    (println "    long result = " main-thread "(&ctx);")
    (println "    printf(\"Result: %ld\\n\", result);")
    (println "    return 0;")
    (println "}"))))