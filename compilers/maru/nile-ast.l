(load "print-structure.l")

(define-function make-constructor-inits (fields offset)
  (let ((init `(set (oop-at self ,offset) ,(car fields))))
    (if fields (cons init (make-constructor-inits (cdr fields) (+ offset 1))))))

(define-form define-constructor (struct-name constructor-name fields)
  `(define-function ,constructor-name ,fields
     (let ((self (new ,struct-name)))
       ,@(make-constructor-inits fields 0)
       self)))

(define-function make-structure-method (spec struct-name)
  (let ((name (car spec)) (args (cadr spec)) (body (cddr spec)))
    (println `(define-method ,name ,struct-name ,args ,body))
    `(define-method ,name ,struct-name ,args ,@body)))

(define-form define-ast-node (name fields . methods)
  (let ((struct-name (concat-symbol '< (concat-symbol name '>))))
    `(let ()
        (define-structure ,struct-name ,fields)
        (define-constructor ,struct-name ,name ,fields)
        ,@(map-with make-structure-method methods struct-name))))

(define-method resolve-refs <string> (env)
  (or (cdr (assq self env)) (error self " is undefined")))

;;;;;;;;;;;;;;;;;; AST NODES ;;;;;;;;;;;;;;;;;;;;;;;

(define-ast-node nile-typedvar (name type)
  (do-print () (print self.name":"self.type))
  (print-structure (n) (print self))
  (name     () self.name)
  (resolve-refs (env)
    (set self.type (resolve-refs self.type env))
    self)
  (resolve-types (env) self.type self))

(define-method get-defs <string> ()
  (list (cons self (nile-typedvar self nile-TYPE-UNKNOWN))))

(define-ast-node nile-pattern (elements)
  (do-print () (print self.elements))
  (print-structure (n) (print self))
  (get-defs () (foldr
    (lambda (e defs) (concat-list (get-defs e) defs))
    () self.elements)))

(define-ast-node nile-realexpr (real)
  (do-print () (print self.real))
  (print-structure (n) (print self))
  (resolve-refs (env) self))

(define-ast-node nile-varexpr (var)
  (do-print () (print self.var))
  (print-structure (n) (print self))
  (resolve-refs (env)
    (set self.var (resolve-refs self.var env))
    self))

(define-ast-node nile-tupleexpr (elements)
  (resolve-refs (env)
    (set self.elements (map-with resolve-refs self.elements env))
    self))

(define-ast-node nile-condcase (value condition)
  (resolve-refs (env)
    (set self.value (resolve-refs self.value env))
    (set self.condition (resolve-refs self.condition env))
    self))

(define-ast-node nile-condexpr (cases default)
  (resolve-refs (env)
    (set self.cases (map-with resolve-refs self.cases env))
    (set self.default (resolve-refs self.default env))
    self))

(define-ast-node nile-recfieldexpr (rec fields)
  (resolve-refs (env)
    (set self.rec (resolve-refs self.rec env))
    self))

(define-ast-node nile-coerceexpr (value type)
  (resolve-refs (env)
    (set self.value (resolve-refs self.value env))
    (set self.type (resolve-refs self.type env))
    self))

(define-ast-node nile-opexpr (op args)
  (resolve-refs (env)
    (set self.args (map-with resolve-refs self.args env))
    self))

(define-ast-node nile-vardef (pattern value)
  (get-defs () (get-defs self.pattern))
  (resolve-refs (env)
    (set self.value (resolve-refs self.value env))
    self))

(define-ast-node nile-instmt (values)
  (get-defs () ())
  (resolve-refs (env)
    (set self.values (map-with resolve-refs self.values env))
    self))

(define-ast-node nile-outstmt (values)
  (get-defs () ())
  (resolve-refs (env)
    (set self.values (map-with resolve-refs self.values env))
    self))

(define-ast-node nile-ifstmt (condition iftrue iffalse)
  (get-defs () ())
  (resolve-refs (env)
    (let ((tenv env) (fenv env))
      (set self.condition (resolve-refs self.condition env))
      (list-do stmt self.iftrue
        (resolve-refs stmt tenv)
        (set tenv (concat-list (get-defs stmt) tenv)))
      (list-do stmt self.iffalse
        (resolve-refs stmt fenv)
        (set fenv (concat-list (get-defs stmt) fenv))))
    self))

(define-ast-node nile-tupletype (elements)
  (do-print () (print self.elements))
  (print-structure (n) (print self))
  (resolve-refs (env)
    (set self.elements (map-with resolve-refs self.elements env))
    self)
  (resolve-types (env)
    (set self.elements (map-with resolve-types self.elements env))
    self))

(define-ast-node nile-recordtype (fields)
  (do-print () (print self.fields))
  (print-structure (n) (print self))
  (resolve-refs (env)
    (set self.fields (map-with resolve-refs self.fields env))
    self)
  (resolve-types (env)
    (set self.fields (map-with resolve-types self.fields env))
    self))
     
(define-ast-node nile-processtype (intype outtype)
  (do-print () (print self.intype" >> "self.outtype))
  (print-structure (n) (print self))
  (resolve-refs (env)
    (set self.intype (resolve-refs self.intype env))
    (set self.outtype (resolve-refs self.outtype env))
    self)
  (resolve-types (env)
    (set self.intype (resolve-types self.intype env))
    (set self.outtype (resolve-types self.outtype env))
    self))

(define-ast-node nile-typedef (name type)
  (do-print () (print self.name))
  (print-structure (n)
    (if (< n 2) (default-print-structure self n) (print self)))
  (name     () self.name)
  (resolve-refs (env)
    (if self.type (set self.type (resolve-refs self.type env)))
    self)
  (resolve-types (env) self))

(define-ast-node nile-opsig (name args type)
  (do-print () (print self.name self.args))
  (print-structure (n)
    (if (< n 2) (default-print-structure self n) (print self)))
  (name     () self.name)
  (get-defs () (map (lambda (arg) (cons (name arg) arg)) self.args))
  (resolve-refs (env)
    (set self.args (map-with resolve-refs self.args env))
    (set self.type (resolve-refs self.type env))
    self))

(define-ast-node nile-opdef (sig stmts result)
  (do-print () (print self.sig))
  (print-structure (n)
    (if (< n 2) (default-print-structure self n) (print self)))
  (name     () (name self.sig))
  (resolve-refs (env)
    (set self.sig (resolve-refs self.sig env))
    (set env (concat-list (get-defs self.sig) env))
    (list-do stmt self.stmts
      (resolve-refs stmt env)
      (set env (concat-list (get-defs stmt) env)))
    (if self.result (set self.result (resolve-refs self.result env)))
    self))

(define-ast-node nile-processsig (name args type)
  (do-print () (print self.name))
  (name     () self.name)
  (get-defs () (map (lambda (arg) (cons (name arg) arg)) self.args))
  (resolve-refs (env)
    (set self.args (map-with resolve-refs self.args env))
    (set self.type (resolve-refs self.type env))
    self))

(define-ast-node nile-processbody (pattern stmts)
  (resolve-refs (env)
    (set env (concat-list (get-defs self.pattern) env))
    (list-do stmt self.stmts
      (resolve-refs stmt env)
      (set env (concat-list (get-defs stmt) env)))
    self))

(define-ast-node nile-processdef (sig prologue body epilogue)
  (do-print () (print self.sig))
  (print-structure (n)
    (if (< n 2) (default-print-structure self n) (print self)))
  (name     () (name self.sig))
  (resolve-refs (env)
    (set self.sig (resolve-refs self.sig env))
    (set env (concat-list (get-defs self.sig) env))
    (list-do stmt self.prologue
      (resolve-refs stmt env)
      (set env (concat-list (get-defs stmt) env)))
    (if self.body (set self.body (resolve-refs self.body env)))
    (list-do stmt self.epilogue
      (resolve-refs stmt env)
      (set env (concat-list (get-defs stmt) env)))
    self))

(define-ast-node nile-processinst (name args)
  (resolve-refs (env)
    (set self.name (resolve-refs self.name env))
    (set self.args (map-with resolve-refs self.args env))
    self))

(define-ast-node nile-pexpr (processes)
  (resolve-refs (env)
    (set self.processes (map-with resolve-refs self.processes env))
    self))

(define-ast-node nile-substmt (pexpr)
  (get-defs () ())
  (resolve-refs (env)
    (set self.pexpr (resolve-refs self.pexpr env))
    self))
