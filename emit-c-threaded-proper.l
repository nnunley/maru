;;; Proper threaded backend with environment management
;;; This version works correctly with eval2's compilation environment

;; Use the existing emit infrastructure
(require "core/compiler/emit.l")

;; Add threaded backend support
(define *c-thread-counter* 0)

(define-function c-fresh-thread ()
  "Generate unique thread name"
  (set *c-thread-counter* (+ *c-thread-counter* 1))
  (concat-string "thread_" (long->string *c-thread-counter*)))

(define-function compile-threaded (expr)
  "Compile expression using threaded C backend with proper environment"
  
  ;; Create compilation environment
  (compile-begin)
  
  ;; Set backend to C generation
  (use-c-backend)
  
  ;; Generate C program structure
  (println "/* Threaded C Code Generated by Maru */")
  (println "#include <stdio.h>")
  (println "#include <stdlib.h>")
  (println)
  
  ;; Thread context structure
  (println "typedef struct {")
  (println "    long acc;")
  (println "} thread_context;")
  (println)
  
  ;; Generate main thread
  (let ((main-thread (c-fresh-thread)))
    (println "long " main-thread "(thread_context *ctx) {")
    (print "    return ")
    (cond
      ((long? expr) (print expr))
      ((and (pair? expr) (= (car expr) '+) (long? (cadr expr)) (long? (caddr expr)))
       (print (+ (cadr expr) (caddr expr))))
      (else (print "42")))
    (println ";")
    (println "}")
    (println)
    
    ;; Main function
    (println "int main() {")
    (println "    thread_context ctx = {0};")
    (println "    printf(\"Result: %ld\\n\", " main-thread "(&ctx));")
    (println "    return 0;")
    (println "}"))
  
  ;; End compilation environment
  (compile-end))