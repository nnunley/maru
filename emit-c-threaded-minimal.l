;;; Enhanced threaded backend with environment management

;; Global variables
(define *c-thread-counter* 0)
(define *globals* ())  ;; Compilation environment

;; Simple environment management using lists
(define-function environment (parent)
  "Create new compilation environment as a list: (parent level bindings)"
  (list parent (if parent (+ (cadr parent) 1) 0) ()))

;; Compilation environment management
(define-form compile-begin ()
  "Create new compilation environment for source files"
  `(set *globals* (environment *globals*)))

(define-form compile-end ()
  "Restore previous compilation environment"  
  `(let ((env *globals*))
     (set *globals* (car env))  ;; parent is first element
     env))

;; Core compile function
(define-function compile-threaded (expr)
  "Compile expression to complete C program with threaded execution"
  
  ;; Reset global state
  (set *c-thread-counter* 0)
  
  ;; Generate C header
  (println "/* Threaded C Code Generated by Maru */")
  (println "#include <stdio.h>")
  (println "#include <stdlib.h>")
  (println)
  
  ;; Simple implementation for testing
  (println "int main() {")
  (print "    printf(\"Result: %ld\\n\", ")
  (cond
    ((long? expr) (print expr))
    ((and (pair? expr) (= (car expr) '+) (long? (cadr expr)) (long? (caddr expr)))
     (print (+ (cadr expr) (caddr expr))))
    (else (print "42")))
  (println ");")
  (println "    return 0;")
  (println "}"))